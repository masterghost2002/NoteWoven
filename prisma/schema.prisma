// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Theme {
  light
  dark
  system
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    User?
  domainUrl String
  website   String
  bio       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String    @unique
  username   String    @unique
  fullname   String
  password   String
  profileUrl String?
  theme      Theme     @default(system)
  devices    Json[] // will be added by the browser
  history    History[]
  books      Book[]
  trash      Trash[]

  admin   Admin?  @relation(fields: [adminId], references: [id])
  adminId String? @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model History {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  timeStamp DateTime @default(now())
  action    String
  message   String
}

model Book {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  sharedLink String?   @unique
  expiryAt   DateTime?
  password   String?
  title      String
  isTrashed  Boolean   @default(false)
  trash      Trash     @relation(fields: [trashId], references: [id])
  trashId    String    @db.ObjectId
  bookCover  String?
  pages      Page[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Page {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Trash
model Trash {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  books     Book[]
  createdAt DateTime @default(now())
}
